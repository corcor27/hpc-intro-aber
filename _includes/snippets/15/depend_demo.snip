To demonstrate, let's use `module list`. `module list` shows all loaded software modules.

```
{{ site.host_prompt }} module list
```
{: .bash}
```
Currently Loaded Modules:
  1) lmod   2) slurm/22.05.2-1   3) python/3.11.1
```
{: .output}

```
{{ site.host_prompt }} module load BLAST/blast-2.2.31+
{{ site.host_prompt }} module list
```
{: .bash}
```
Currently Loaded Modules:
  1) lmod   2) slurm/22.05.2-1   3) python/3.11.1   4) BLAST/blast-2.2.31+
```
{: .output}



So in this case, loading the `BLAST` module (a bioinformatics software package)  Let's try unloading the `BLAST`  package.

```
{{ site.host_prompt }} module unload plink
{{ site.host_prompt }} module list
```
{: .bash}

So using `module unload` "un-loads" a module but **NOT** its dependencies.
If we wanted to unload everything at once, we could run `module purge` (unloads everything).

```
{{ site.host_prompt }} module purge
{{ site.host_prompt }} module list
```
{: .bash}
```
No Modulefiles Currently Loaded.
```
{: .output}

Note is has unloaded everything, including the original ```null``` package that was used as a placeholder for
initialisation.

